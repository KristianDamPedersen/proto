// source: graph/v1/spec.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.graph.AdjacencyMatrix', null, global);
goog.exportSymbol('proto.graph.Edge', null, global);
goog.exportSymbol('proto.graph.Graph', null, global);
goog.exportSymbol('proto.graph.Route', null, global);
goog.exportSymbol('proto.graph.Row', null, global);
goog.exportSymbol('proto.graph.Vertice', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graph.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.graph.Graph.repeatedFields_, null);
};
goog.inherits(proto.graph.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graph.Graph.displayName = 'proto.graph.Graph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graph.Vertice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graph.Vertice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graph.Vertice.displayName = 'proto.graph.Vertice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graph.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graph.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graph.Edge.displayName = 'proto.graph.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graph.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.graph.Route.repeatedFields_, null);
};
goog.inherits(proto.graph.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graph.Route.displayName = 'proto.graph.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graph.AdjacencyMatrix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.graph.AdjacencyMatrix.repeatedFields_, null);
};
goog.inherits(proto.graph.AdjacencyMatrix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graph.AdjacencyMatrix.displayName = 'proto.graph.AdjacencyMatrix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graph.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.graph.Row.repeatedFields_, null);
};
goog.inherits(proto.graph.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.graph.Row.displayName = 'proto.graph.Row';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.graph.Graph.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graph.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.graph.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graph.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    verticesList: jspb.Message.toObjectList(msg.getVerticesList(),
    proto.graph.Vertice.toObject, includeInstance),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.graph.Edge.toObject, includeInstance),
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.graph.Route.toObject, includeInstance),
    adjacencymatrix: (f = msg.getAdjacencymatrix()) && proto.graph.AdjacencyMatrix.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graph.Graph}
 */
proto.graph.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graph.Graph;
  return proto.graph.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graph.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graph.Graph}
 */
proto.graph.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.graph.Vertice;
      reader.readMessage(value,proto.graph.Vertice.deserializeBinaryFromReader);
      msg.addVertices(value);
      break;
    case 2:
      var value = new proto.graph.Edge;
      reader.readMessage(value,proto.graph.Edge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    case 3:
      var value = new proto.graph.Route;
      reader.readMessage(value,proto.graph.Route.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    case 4:
      var value = new proto.graph.AdjacencyMatrix;
      reader.readMessage(value,proto.graph.AdjacencyMatrix.deserializeBinaryFromReader);
      msg.setAdjacencymatrix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graph.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graph.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graph.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.graph.Vertice.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.graph.Edge.serializeBinaryToWriter
    );
  }
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.graph.Route.serializeBinaryToWriter
    );
  }
  f = message.getAdjacencymatrix();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.graph.AdjacencyMatrix.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Vertice vertices = 1;
 * @return {!Array<!proto.graph.Vertice>}
 */
proto.graph.Graph.prototype.getVerticesList = function() {
  return /** @type{!Array<!proto.graph.Vertice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graph.Vertice, 1));
};


/**
 * @param {!Array<!proto.graph.Vertice>} value
 * @return {!proto.graph.Graph} returns this
*/
proto.graph.Graph.prototype.setVerticesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.graph.Vertice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graph.Vertice}
 */
proto.graph.Graph.prototype.addVertices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.graph.Vertice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graph.Graph} returns this
 */
proto.graph.Graph.prototype.clearVerticesList = function() {
  return this.setVerticesList([]);
};


/**
 * repeated Edge edges = 2;
 * @return {!Array<!proto.graph.Edge>}
 */
proto.graph.Graph.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.graph.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graph.Edge, 2));
};


/**
 * @param {!Array<!proto.graph.Edge>} value
 * @return {!proto.graph.Graph} returns this
*/
proto.graph.Graph.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.graph.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graph.Edge}
 */
proto.graph.Graph.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.graph.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graph.Graph} returns this
 */
proto.graph.Graph.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};


/**
 * repeated Route routes = 3;
 * @return {!Array<!proto.graph.Route>}
 */
proto.graph.Graph.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.graph.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graph.Route, 3));
};


/**
 * @param {!Array<!proto.graph.Route>} value
 * @return {!proto.graph.Graph} returns this
*/
proto.graph.Graph.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.graph.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graph.Route}
 */
proto.graph.Graph.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.graph.Route, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graph.Graph} returns this
 */
proto.graph.Graph.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};


/**
 * optional AdjacencyMatrix adjacencyMatrix = 4;
 * @return {?proto.graph.AdjacencyMatrix}
 */
proto.graph.Graph.prototype.getAdjacencymatrix = function() {
  return /** @type{?proto.graph.AdjacencyMatrix} */ (
    jspb.Message.getWrapperField(this, proto.graph.AdjacencyMatrix, 4));
};


/**
 * @param {?proto.graph.AdjacencyMatrix|undefined} value
 * @return {!proto.graph.Graph} returns this
*/
proto.graph.Graph.prototype.setAdjacencymatrix = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.graph.Graph} returns this
 */
proto.graph.Graph.prototype.clearAdjacencymatrix = function() {
  return this.setAdjacencymatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.graph.Graph.prototype.hasAdjacencymatrix = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graph.Vertice.prototype.toObject = function(opt_includeInstance) {
  return proto.graph.Vertice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graph.Vertice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Vertice.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graph.Vertice}
 */
proto.graph.Vertice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graph.Vertice;
  return proto.graph.Vertice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graph.Vertice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graph.Vertice}
 */
proto.graph.Vertice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graph.Vertice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graph.Vertice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graph.Vertice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Vertice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.graph.Vertice.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.graph.Vertice} returns this
 */
proto.graph.Vertice.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.graph.Vertice.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.graph.Vertice} returns this
 */
proto.graph.Vertice.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float x = 3;
 * @return {number}
 */
proto.graph.Vertice.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.graph.Vertice} returns this
 */
proto.graph.Vertice.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float y = 4;
 * @return {number}
 */
proto.graph.Vertice.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.graph.Vertice} returns this
 */
proto.graph.Vertice.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graph.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.graph.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graph.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.graph.Vertice.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.graph.Vertice.toObject(includeInstance, f),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graph.Edge}
 */
proto.graph.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graph.Edge;
  return proto.graph.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graph.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graph.Edge}
 */
proto.graph.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.graph.Vertice;
      reader.readMessage(value,proto.graph.Vertice.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.graph.Vertice;
      reader.readMessage(value,proto.graph.Vertice.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graph.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graph.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graph.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.graph.Vertice.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.graph.Vertice.serializeBinaryToWriter
    );
  }
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional Vertice source = 1;
 * @return {?proto.graph.Vertice}
 */
proto.graph.Edge.prototype.getSource = function() {
  return /** @type{?proto.graph.Vertice} */ (
    jspb.Message.getWrapperField(this, proto.graph.Vertice, 1));
};


/**
 * @param {?proto.graph.Vertice|undefined} value
 * @return {!proto.graph.Edge} returns this
*/
proto.graph.Edge.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.graph.Edge} returns this
 */
proto.graph.Edge.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.graph.Edge.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vertice target = 2;
 * @return {?proto.graph.Vertice}
 */
proto.graph.Edge.prototype.getTarget = function() {
  return /** @type{?proto.graph.Vertice} */ (
    jspb.Message.getWrapperField(this, proto.graph.Vertice, 2));
};


/**
 * @param {?proto.graph.Vertice|undefined} value
 * @return {!proto.graph.Edge} returns this
*/
proto.graph.Edge.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.graph.Edge} returns this
 */
proto.graph.Edge.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.graph.Edge.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float weight = 3;
 * @return {number}
 */
proto.graph.Edge.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.graph.Edge} returns this
 */
proto.graph.Edge.prototype.setWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.graph.Route.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graph.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.graph.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graph.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    verticeList: jspb.Message.toObjectList(msg.getVerticeList(),
    proto.graph.Vertice.toObject, includeInstance),
    accumulatedweightList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graph.Route}
 */
proto.graph.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graph.Route;
  return proto.graph.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graph.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graph.Route}
 */
proto.graph.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.graph.Vertice;
      reader.readMessage(value,proto.graph.Vertice.deserializeBinaryFromReader);
      msg.addVertice(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setAccumulatedweightList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graph.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graph.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graph.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerticeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.graph.Vertice.serializeBinaryToWriter
    );
  }
  f = message.getAccumulatedweightList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * repeated Vertice vertice = 1;
 * @return {!Array<!proto.graph.Vertice>}
 */
proto.graph.Route.prototype.getVerticeList = function() {
  return /** @type{!Array<!proto.graph.Vertice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graph.Vertice, 1));
};


/**
 * @param {!Array<!proto.graph.Vertice>} value
 * @return {!proto.graph.Route} returns this
*/
proto.graph.Route.prototype.setVerticeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.graph.Vertice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graph.Vertice}
 */
proto.graph.Route.prototype.addVertice = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.graph.Vertice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graph.Route} returns this
 */
proto.graph.Route.prototype.clearVerticeList = function() {
  return this.setVerticeList([]);
};


/**
 * repeated float accumulatedWeight = 2;
 * @return {!Array<number>}
 */
proto.graph.Route.prototype.getAccumulatedweightList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.graph.Route} returns this
 */
proto.graph.Route.prototype.setAccumulatedweightList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.graph.Route} returns this
 */
proto.graph.Route.prototype.addAccumulatedweight = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graph.Route} returns this
 */
proto.graph.Route.prototype.clearAccumulatedweightList = function() {
  return this.setAccumulatedweightList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.graph.AdjacencyMatrix.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graph.AdjacencyMatrix.prototype.toObject = function(opt_includeInstance) {
  return proto.graph.AdjacencyMatrix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graph.AdjacencyMatrix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.AdjacencyMatrix.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowList: jspb.Message.toObjectList(msg.getRowList(),
    proto.graph.Row.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graph.AdjacencyMatrix}
 */
proto.graph.AdjacencyMatrix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graph.AdjacencyMatrix;
  return proto.graph.AdjacencyMatrix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graph.AdjacencyMatrix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graph.AdjacencyMatrix}
 */
proto.graph.AdjacencyMatrix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.graph.Row;
      reader.readMessage(value,proto.graph.Row.deserializeBinaryFromReader);
      msg.addRow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graph.AdjacencyMatrix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graph.AdjacencyMatrix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graph.AdjacencyMatrix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.AdjacencyMatrix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.graph.Row.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Row row = 1;
 * @return {!Array<!proto.graph.Row>}
 */
proto.graph.AdjacencyMatrix.prototype.getRowList = function() {
  return /** @type{!Array<!proto.graph.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graph.Row, 1));
};


/**
 * @param {!Array<!proto.graph.Row>} value
 * @return {!proto.graph.AdjacencyMatrix} returns this
*/
proto.graph.AdjacencyMatrix.prototype.setRowList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.graph.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graph.Row}
 */
proto.graph.AdjacencyMatrix.prototype.addRow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.graph.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graph.AdjacencyMatrix} returns this
 */
proto.graph.AdjacencyMatrix.prototype.clearRowList = function() {
  return this.setRowList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.graph.Row.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graph.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.graph.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graph.Row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    weightList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graph.Row}
 */
proto.graph.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graph.Row;
  return proto.graph.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graph.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graph.Row}
 */
proto.graph.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setWeightList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graph.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graph.Row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graph.Row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graph.Row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeightList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float weight = 1;
 * @return {!Array<number>}
 */
proto.graph.Row.prototype.getWeightList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.graph.Row} returns this
 */
proto.graph.Row.prototype.setWeightList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.graph.Row} returns this
 */
proto.graph.Row.prototype.addWeight = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.graph.Row} returns this
 */
proto.graph.Row.prototype.clearWeightList = function() {
  return this.setWeightList([]);
};


goog.object.extend(exports, proto.graph);
